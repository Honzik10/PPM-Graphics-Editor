/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package beziere;

import beziere.BeziereCurve;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;

//Represents draw panel for beziere curve.
//Control points are repsrented as points and drawed as circles.
public class BeziereCurveDrawPanel extends javax.swing.JPanel {

    private ArrayList<Ellipse2D> circleList;
    private Ellipse2D shapeToMove = null;
    private ArrayList<Point> controlPointList;
    private ArrayList<Point> pointList;
    int circleWidth = 10;

    public BeziereCurveDrawPanel() {
        initComponents();
        circleList = new ArrayList();
        controlPointList = new ArrayList();
        this.setBackground(Color.WHITE);
    }

    public void setNewPoints() {
        pointList = BeziereCurve.calculateBeziereCurve(controlPointList);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.RED);
        if (pointList != null && pointList.size() > 1) {

            for (int i = 0; i < pointList.size() - 1; i++) {
                Point currP = pointList.get(i);
                Point nextP = pointList.get(i + 1);
                g2d.drawLine(currP.x, currP.y, nextP.x, nextP.y);
            }
        }

        g2d.setColor(Color.BLACK);
        if (controlPointList.size() > 2) {
            for (int i = 0; i < controlPointList.size() - 1; i++) {
                Point currP = controlPointList.get(i);
                Point nextP = controlPointList.get(i + 1);
                g2d.drawLine(currP.x, currP.y, nextP.x, nextP.y);
            }
        }

        
        for (Ellipse2D ellipse : circleList) {
            if (ellipse != shapeToMove) {
                g2d.draw(ellipse);
            } else {
                g2d.setColor(Color.RED);
                g2d.draw(ellipse);
                g2d.setColor(Color.BLACK);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mousePressedAction(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //Check whenever to draw and add new point or move existing one
    private void mousePressedAction(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mousePressedAction
        // TODO add your handling code here:
        int clickX = evt.getX();
        int clickY = evt.getY();

        //Check if click on cicrle ( point )
        boolean isShapeBeingMoved = setShapeToMove(clickX, clickY);

        //Click on blank field = create new circle(point)
        if (!isShapeBeingMoved) {
            addCircle(clickX, clickY, circleList.size());
        }

        this.repaint();
    }//GEN-LAST:event_mousePressedAction

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        shapeToMove = null;
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();

        if (shapeToMove != null) {
            if (checkIfCanDrawCircle(shapeToMove)) {
                System.out.println("Przesuwam do przesuniecia z pozycji " + shapeToMove.getX() + " " + shapeToMove.getY());
                int removedIndex = removeCirclePoint(shapeToMove);
                addCircle(x, y, removedIndex);
                
            } else {
                System.out.println("Nie moge rysowac(przesuwajac) w tym miejscu! Istnieje juz kolo! Liczba kol: " + circleList.size());
                shapeToMove = null;
            }

        } else {
            setShapeToMove(x, y);
        }

        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private boolean addCircle(int x, int y, int instertionIndex) {
        int newX = (int) (x - circleWidth / 2.0);
        int newY = (int) (y - circleWidth / 2.0);
        Ellipse2D circle = new Ellipse2D.Double(newX, newY, circleWidth, circleWidth);

        if (checkIfCanDrawCircle(circle)) {
            System.out.println("Dodaje pkt kontrolny na pozycji " + x + " " + y);
            Point newP = new Point(x, y);
            controlPointList.add(instertionIndex, newP);
            circleList.add(instertionIndex, circle);

            return true;
        } else {
            System.out.println("Nie moge narysowac kola. Istnieje juz kolo na tej pozycji!");
            return false;
        }

    }

    private boolean checkIfCanDrawCircle(Ellipse2D circleToCheck) {
        Area newCircleArea = new Area(circleToCheck);
        for (Ellipse2D e : circleList) {
            if (e != circleToCheck) {
                if (e.getBounds2D().intersects(newCircleArea.getBounds2D())) {
                    return false;
                }
            }

        }
        return true;
    }

    private boolean setShapeToMove(int x, int y) {
        for (Ellipse2D e : circleList) {
            if (e.contains(x, y)) {
                System.out.println("Ustawiam kolo do przesuniecia z pozycji " + e.getX() + " " + e.getY());
                shapeToMove = e;
                return true;
            }
        }
        return false;
    }

    public void removeAllPoints() {
        try {
            controlPointList.clear();
            circleList.clear();
            pointList.clear();
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
    }

    private int removeCirclePoint(Ellipse2D circle) {
        int index = circleList.indexOf(circle);
        circleList.remove(index);
        controlPointList.remove(index);
        return index;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
